# generated by patch-package 6.4.14
#
# declared package:
#   typescript-json-schema: krizka/typescript-json-schema
#
diff --git a/node_modules/typescript-json-schema/dist/typescript-json-schema.js b/node_modules/typescript-json-schema/dist/typescript-json-schema.js
index 2ade3a1..0912914 100644
--- a/node_modules/typescript-json-schema/dist/typescript-json-schema.js
+++ b/node_modules/typescript-json-schema/dist/typescript-json-schema.js
@@ -704,7 +704,7 @@ var JsonSchemaGenerator = (function () {
         }
         return definition;
     };
-    JsonSchemaGenerator.prototype.getUnionDefinition = function (unionType, unionModifier, definition) {
+    JsonSchemaGenerator.prototype.getUnionDefinition = function (unionType, unionModifier, definition, reffedType) {
         var enumValues = [];
         var simpleTypes = [];
         var schemas = [];
@@ -726,7 +726,7 @@ var JsonSchemaGenerator = (function () {
             }
             else {
                 var symbol = valueType.aliasSymbol;
-                var def = this.getTypeDefinition(valueType, undefined, undefined, symbol, symbol, undefined, undefined, true);
+                var def = this.getTypeDefinition(valueType, undefined, undefined, symbol, symbol || reffedType, undefined, undefined, true);
                 if (def.type === "undefined") {
                     continue;
                 }
@@ -1103,7 +1103,7 @@ var JsonSchemaGenerator = (function () {
             var node = (symbol === null || symbol === void 0 ? void 0 : symbol.getDeclarations()) !== undefined ? symbol.getDeclarations()[0] : null;
             if (definition.type === undefined) {
                 if (typ.flags & ts.TypeFlags.Union && (node === null || node.kind !== ts.SyntaxKind.EnumDeclaration)) {
-                    this.getUnionDefinition(typ, unionModifier, definition);
+                    this.getUnionDefinition(typ, unionModifier, definition, reffedType);
                 }
                 else if (typ.flags & ts.TypeFlags.Intersection) {
                     if (this.args.noExtraProps) {
diff --git a/node_modules/typescript-json-schema/typescript-json-schema.ts b/node_modules/typescript-json-schema/typescript-json-schema.ts
index 8471203..f7a5929 100644
--- a/node_modules/typescript-json-schema/typescript-json-schema.ts
+++ b/node_modules/typescript-json-schema/typescript-json-schema.ts
@@ -951,7 +951,8 @@ export class JsonSchemaGenerator {
     private getUnionDefinition(
         unionType: ts.UnionType,
         unionModifier: keyof Definition,
-        definition: Definition
+        definition: Definition,
+        reffedType?: ts.Symbol,
     ): Definition {
         const enumValues: PrimitiveType[] = [];
         const simpleTypes: JSONSchema7TypeName[] = [];
@@ -975,7 +976,7 @@ export class JsonSchemaGenerator {
                 pushEnumValue(value);
             } else {
                 const symbol = valueType.aliasSymbol;
-                const def = this.getTypeDefinition(valueType, undefined, undefined, symbol, symbol, undefined, undefined, true);
+                const def = this.getTypeDefinition(valueType, undefined, undefined, symbol, symbol || reffedType, undefined, undefined, true);
                 if (def.type === "undefined" as any) {
                     continue;
                 }
@@ -1447,7 +1448,7 @@ export class JsonSchemaGenerator {
             if (definition.type === undefined) {
                 // if users override the type, do not try to infer it
                 if (typ.flags & ts.TypeFlags.Union && (node === null || node.kind !== ts.SyntaxKind.EnumDeclaration)) {
-                    this.getUnionDefinition(typ as ts.UnionType, unionModifier, definition);
+                    this.getUnionDefinition(typ as ts.UnionType, unionModifier, definition, reffedType);
                 } else if (typ.flags & ts.TypeFlags.Intersection) {
                     if (this.args.noExtraProps) {
                         // extend object instead of using allOf because allOf does not work well with additional properties. See #107

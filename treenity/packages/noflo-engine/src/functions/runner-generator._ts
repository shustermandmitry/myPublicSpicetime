import { types } from '@treenity/core';
// import { TNG, useEffect, useMemo } from 'tng-hooks';
import { createComponentTng } from 'src/functions/create-component-tng';

const wait = (ms: number) => new Promise(res => setTimeout(res, ms));

class Bot {
  ints: ReturnType<typeof setInterval>[] = [];

  on(event: string, cb: (ev: string) => void) {
    this.ints.push(setInterval(() => cb(event), 50));
  }

  close() {
    this.ints.forEach(int => clearInterval(int));
  }
}

export const Generator2 = () => {
  const { inPorts, outPorts } = types.noflo.get('meta.type/node-engine');
  return createComponentTng({
    inPorts,
    outPorts,
    async *proc(inp, out) {
      if (!('from' in inp && 'to' in inp)) return;

      const { from, to } = inp;
      for (let i = from; i < to; i++) {
        yield { out: i };
        await wait(100);
      }
    },
  });
};
types.noflo.add(
  'meta.type/node-engine',
  {
    inPorts: {
      from: { datatype: 'number', required: true },
      to: { datatype: 'number', required: true },
      key: { datatype: 'string', required: true },
    },
    outPorts: {
      out: { datatype: 'number' },
      message: { datatype: 'object' },
    },
  },
  Generator2,
);
